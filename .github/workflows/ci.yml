name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build
        python -m pip install --upgrade pip
        pip install meson
      if: matrix.os == 'ubuntu-latest'

    - name: Install dependencies (Windows)
      run: |
        choco install ninja
        python -m pip install --upgrade pip
        pip install meson
      if: matrix.os == 'windows-latest'
      
    - name: Set up Python virtual environment
      run: python -m venv venv

    - name: Activate virtual environment and install dependencies (Ubuntu)
      run: |
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      if: matrix.os == 'ubuntu-latest'
      
    - name: Activate virtual environment and install dependencies (Windows)
      run: |
        .\\venv\\Scripts\\activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      if: matrix.os == 'windows-latest'


    - name: Build
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          .\\venv\\Scripts\\activate
          meson setup debug --buildtype=debug --backend=vs
          meson setup release --buildtype=release --backend=vs
        else
          . venv/bin/activate
          meson setup debug --buildtype=debug --backend=ninja
          meson setup release --buildtype=release --backend=ninja
        fi
        meson compile -C debug
        meson compile -C release

    - name: Test
      run: meson test -C debug
